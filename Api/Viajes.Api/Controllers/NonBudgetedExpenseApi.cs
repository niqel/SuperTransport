/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@tc.com.mx
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Viajes.Api.Business;
using TmsTcAPI.DAL.Models;
using CrmTc.DAL.Models;
using NonBudgetedExpense = IO.Swagger.Models.NonBudgetedExpense;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NonBudgetedExpenseApiController : ControllerBase
    {
        protected TmsTcAPI.DAL.Models.TmsTcEntities TmsContext { get; private set; }
        protected CrmTc.DAL.Models.CrmTcEntities CrmTcEntities { get; set; }

        protected NonBudgetedExpenseBusiness NonBudgetedExpenseBusiness { get; set; }

        public NonBudgetedExpenseApiController(TmsTcEntities context, CrmTcEntities crmContext)
        {
            this.TmsContext = context;
            this.CrmTcEntities = crmContext;
            this.NonBudgetedExpenseBusiness = new NonBudgetedExpenseBusiness(TmsContext, CrmTcEntities, User);
        }

        /// <summary>
        /// Consulta de gastos no presupuestados por fecha
        /// </summary>
        /// <param name="date">La fecha del gasto no presupestado</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/api/viajes/nonBudgetedExpense/date/{date}")]
        [ValidateModelState]
        [SwaggerOperation("GetAllByDateNonBudgetedExpense")]
        [SwaggerResponse(statusCode: 200, type: typeof(RNonBudgetedExpense), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetAllByDateNonBudgetedExpense([FromRoute][Required]DateTime? date)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RNonBudgetedExpense));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            
            return new ObjectResult(this.NonBudgetedExpenseBusiness.GetAllByDateNonBudgetedExpense(date));
        }

        /// <summary>
        /// Consulta de gastos no presupuestados por idStatus
        /// </summary>
        /// <param name="idStatus">id del status</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/api/viajes/nonBudgetedExpense/status/{idStatus}")]
        [ValidateModelState]
        [SwaggerOperation("GetAllByIdStatusNonBudgetedExpense")]
        [SwaggerResponse(statusCode: 200, type: typeof(RNonBudgetedExpense), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetAllByIdStatusNonBudgetedExpense([FromRoute][Required]int? idStatus)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RNonBudgetedExpense));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            
            return new ObjectResult(this.NonBudgetedExpenseBusiness.GetAllByIdStatusNonBudgetedExpense(idStatus));
        }

        /// <summary>
        /// Consulta de gastos no presupuestados por idViaje
        /// </summary>
        /// <param name="idTrip">Es el id del viaje</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/api/viajes/nonBudgetedExpense/trip/{idTrip}")]
        [ValidateModelState]
        [SwaggerOperation("GetAllByTripNonBudgetedExpense")]
        [SwaggerResponse(statusCode: 200, type: typeof(RNonBudgetedExpense), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetAllByTripNonBudgetedExpense([FromRoute][Required]int? idTrip)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RNonBudgetedExpense));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            
            return new ObjectResult(this.NonBudgetedExpenseBusiness.GetAllByTripNonBudgetedExpense(idTrip));
        }

        /// <summary>
        /// Consulta de gastos no presupuestados 
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/api/viajes/nonBudgetedExpense")]
        [ValidateModelState]
        [SwaggerOperation("GetAllNonBudgetedExpense")]
        [SwaggerResponse(statusCode: 200, type: typeof(RNonBudgetedExpense), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetAllNonBudgetedExpense()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RNonBudgetedExpense));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            
            return new ObjectResult(this.NonBudgetedExpenseBusiness.GetAllNonBudgetedExpense());
        }

        /// <summary>
        /// Consulta de gastos no presupuestados por id
        /// </summary>
        /// <param name="id">Es el id del gasto no presupuestado</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/api/viajes/nonBudgetedExpense/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetByIdNonBudgetedExpense")]
        [SwaggerResponse(statusCode: 200, type: typeof(RNonBudgetedExpense), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetByIdNonBudgetedExpense([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RNonBudgetedExpense));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            
            return new ObjectResult(this.NonBudgetedExpenseBusiness.GetByIdNonBudgetedExpense(id));
        }

        /// <summary>
        /// Consulta de gastos no presupuestados por operador y viaje
        /// </summary>
        /// <param name="idOperator">Es el id del Operador</param>
        /// <param name="idTrip">Es el id del viaje</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/api/viajes/nonBudgetedExpense/{idOperator}/{idTrip}")]
        [ValidateModelState]
        [SwaggerOperation("GetByIdOperatorIdTripNonBudgetedExpense")]
        [SwaggerResponse(statusCode: 200, type: typeof(RNonBudgetedExpense), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetByIdOperatorIdTripNonBudgetedExpense([FromRoute][Required]int? idOperator, [FromRoute][Required]int? idTrip)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RNonBudgetedExpense));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            
            return new ObjectResult(this.NonBudgetedExpenseBusiness.GetByIdOperatorIdTripNonBudgetedExpense(idOperator, idTrip));
        }

        /// <summary>
        /// Añade un gasto no presupuestado
        /// </summary>
        /// <param name="body">Añade un gasto no presupuestado</param>
        /// <response code="201">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/api/viajes/nonBudgetedExpense")]
        [ValidateModelState]
        [SwaggerOperation("NonBudgetedExpensePost")]
        [SwaggerResponse(statusCode: 201, type: typeof(CreatedId), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult NonBudgetedExpensePost([FromBody]NonBudgetedExpense body)
        {
            CreatedId createdId = this.NonBudgetedExpenseBusiness.NonBudgetedExpensePost(body);
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(201, createdId);


            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
        }

        /// <summary>
        /// Obtiene la informacion por medio de un Store Procedure y actualiza.
        /// </summary>
        /// <param name="idOperator">Es el id del Operador</param>
        /// <param name="idTrip">Es el id del viaje</param>
        /// <response code="204">El recurso sido cargado.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPatch]
        [Route("/api/viajes/nonBudgetedExpense/{idOperator}/{idTrip}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateExternalNonBudgetedExpense")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult UpdateExternalNonBudgetedExpense([FromRoute][Required]int? idOperator, [FromRoute][Required]int? idTrip)
        {
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            this.NonBudgetedExpenseBusiness.UpdateExternalNonBudgetedExpense(idOperator, idTrip);
             return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
        }

        /// <summary>
        /// Actualiza un gasto no presupuestado
        /// </summary>
        /// <param name="body"></param>
        /// <param name="id">Es el id del Operador</param>
        /// <response code="204">Se actualiza el recurso</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPut]
        [Route("/api/viajes/nonBudgetedExpense/{id}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateNonBudgetedExpense")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult UpdateNonBudgetedExpense([FromBody]NonBudgetedExpense body, [FromRoute][Required]int? id)
        {
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            this.NonBudgetedExpenseBusiness.UpdateNonBudgetedExpense(body, id);
            return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));

        }
    }
}
