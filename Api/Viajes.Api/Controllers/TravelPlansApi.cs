/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using AuthenticationHandler.Controllers;
using CrmTc.DAL.Models;
using InnovaLinks.DAL.Models;
using ListdbTc.DAL.Models;
using TmsTcAPI.DAL.Models;
using IO.Swagger.Business;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TravelPlansApiController : TmsControllerBase
    {
        protected CrmTcEntities CrmContext { get; private set; }
        protected InnovaLinksEntities InnovaLinksContext { get; private set; }
        protected ListdbTcEntities ListdbTcContext { get; private set; }

        public TravelPlansApiController(TmsTcEntities context, InnovaLinksEntities innovaLinksContext, ListdbTcEntities listdbTcContext, CrmTcEntities crmContext) : base(context)
        {
            CrmContext = crmContext;
            InnovaLinksContext = innovaLinksContext;
            ListdbTcContext = listdbTcContext;
        }

        /// <summary>
        /// Ejecuta el plan de viaje para el periodo especificado de manera permanente
        /// </summary>
        /// <remarks>Ejecuta el algoritmo de planeación y regresa el resultado de la ejecución</remarks>
        /// <param name="startDate">La primera fecha a considerar</param>
        /// <param name="endDate">La última fecha a considerar</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/travel-plans")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PostTravelPlans")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult PostTravelPlans([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate)
        {
            return new TravelPlansBusiness(Context, CrmContext, InnovaLinksContext, ListdbTcContext, User).PostTravelPlans(startDate, endDate);
        }

        /// <summary>
        /// Obtiene los planes de viaje del periodo especificado
        /// </summary>
        /// <remarks>Ejecuta el algoritmo de planeación y regresa el resultado correspondiente</remarks>
        /// <param name="startDate">La primera fecha a considerar</param>
        /// <param name="endDate">La última fecha a considerar</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/travel-plans")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [AllowAnonymous]
        [SwaggerOperation("GetTravelPlans")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TravelPlan>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetTravelPlans([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate)
        {
            return new TravelPlansBusiness(Context, CrmContext, InnovaLinksContext, ListdbTcContext, User).GetTravelPlans(startDate, endDate);
        }

        /// <summary>
        /// Descarga los planes de viaje del periodo especificado
        /// </summary>
        /// <remarks>Ejecuta el algoritmo de planeación y regresa el resultado correspondiente</remarks>
        /// <param name="fileName">Nombre del archivo a descargar</param>
        /// <param name="startDate">La primera fecha a considerar</param>
        /// <param name="endDate">La última fecha a considerar</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/travel-plans/download/{fileName}.xlsx")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [AllowAnonymous]
        [SwaggerOperation("DownloadTravelPlans")]
        [FileResultContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult DownloadTravelPlans([FromRoute]string fileName, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate)
        {
            return new TravelPlansBusiness(Context, CrmContext, InnovaLinksContext, ListdbTcContext, User).DownloadTravelPlans(startDate, endDate);
        }
    }
}
