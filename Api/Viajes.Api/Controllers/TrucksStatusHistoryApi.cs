/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
//using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using TmsTcAPI.DAL.Models;
using CrmTc.DAL.Models;
//using System.Security.Claims;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TrucksStatusHistoryApiController : ControllerBase
    {
        private TmsTcEntities tmsTcEntities;
        protected CrmTcEntities CrmContext { get; private set; }

        private Viajes.Api.Business.TrucksStatusHistoryBusiness trucksStatusHistoryBusiness;
        public TrucksStatusHistoryApiController(TmsTcEntities tmsTcEntities, CrmTcEntities crmContext)
        {
            this.trucksStatusHistoryBusiness = new Viajes.Api.Business.TrucksStatusHistoryBusiness(tmsTcEntities, crmContext);
        }
        /// <summary>
        /// Obtiene el historial de los tractores posicionados por fecha, oficina y tipo de mercado
        /// </summary>
        /// <param name="date">Es la fecha de busqueda</param>
        /// <param name="officeId">El id de la oficina donde se estuvo posicionado</param>
        /// <param name="marketTypeId">El id del tipo mercado donde se estuvo posicionado</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/trucks-status-history/positioned")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [SwaggerOperation("GetPositioned")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TrucksStatusHistory>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetPositioned([FromQuery][Required]DateTime date, [FromQuery][Required]int officeId, [FromQuery][Required]int marketTypeId)
        {
            DateTime dateTime = Convert.ToDateTime(date);
            int idOffice = Convert.ToInt32(officeId);
            int idMarketType = Convert.ToInt32(marketTypeId);
            return Ok(this.trucksStatusHistoryBusiness.GetTruckStatusHistoryPosicionates(dateTime, idOffice, idMarketType));
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TrucksStatusHistory>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            
        }

        /// <summary>
        /// Obtiene el historial de los tractores cargados por fecha, oficina y tipo de mercado
        /// </summary>
        /// <param name="date">Es la fecha de busqueda</param>
        /// <param name="officeId">El id de la oficina donde se estuvo posicionado</param>
        /// <param name="marketTypeId">El id del tipo mercado donde se estuvo posicionado</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/trucks-status-history/loaded")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("Getloaded")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TrucksStatusHistory>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult Getloaded([FromQuery][Required]DateTime date, [FromQuery][Required]int officeId, [FromQuery][Required]int marketTypeId)
        {
            DateTime dateTime = Convert.ToDateTime(date);
            int idOffice = Convert.ToInt32(officeId);
            int idMarketType = Convert.ToInt32(marketTypeId);
            return Ok(this.trucksStatusHistoryBusiness.GetTruckStatusHistoryLoaded(dateTime, idOffice, idMarketType));
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TrucksStatusHistory>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
        }

        /// <summary>
        /// Actualiza TruckStatusHistory al dia de hoy
        /// </summary>
        /// <response code="204">El recurso sido cargado.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPatch]
        [Route("/trucks-status-history")]
        [AllowAnonymous]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdatePositionedTruckHistory")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult UpdatePositionedTruckHistory()
        {
            this.trucksStatusHistoryBusiness.UpdatePositionedTruckHistory();
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
             return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
        }
    }
}
