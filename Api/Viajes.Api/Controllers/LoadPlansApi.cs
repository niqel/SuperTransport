/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.Business;
using AuthenticationHandler.Controllers;
using ListdbTc.DAL.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LoadPlansApiController : TmsControllerBase
    {
        protected ListdbTcEntities ListdbTcContext { get; private set; }
        public LoadPlansApiController(TmsTcAPI.DAL.Models.TmsTcEntities context, ListdbTcEntities listdbTcContext) : base(context)
        {
            ListdbTcContext = listdbTcContext;
        }

        /// <summary>
        /// Obtiene el plan de carga
        /// </summary>
        /// <param name="year">El año del plan de carga</param>
        /// <param name="month">El mes del plan de carga</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/load-plans/{year}/{month}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetLoadPlans")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LoadPlan>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetLoadPlans([FromRoute][Required]int? year, [FromRoute][Required]int? month)
        {
            return new LoadPlansBusiness(Context, ListdbTcContext, User).GetLoadPlans(year, month);
        }

        /// <summary>
        /// Actualiza el plan de carga
        /// </summary>
        /// <param name="body"></param>
        /// <param name="year">El año del plan de carga</param>
        /// <param name="month">El mes del plan de carga</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPut]
        [Route("/load-plans/{year}/{month}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [AllowAnonymous]
        [SwaggerOperation("UpdateLoadPlans")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult UpdateLoadPlans([FromRoute][Required]int? year, [FromRoute][Required]int? month)
        {
            return new LoadPlansBusiness(Context, ListdbTcContext, User).UpdateLoadPlans(year, month);
        }


        /// <summary>
        /// Actualiza LoadPlan al dia anterior
        /// </summary>
        /// <response code="204">El recurso sido cargado.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPatch]
        [Route("/load-plans/PreviousDay")]
        [AllowAnonymous]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateLoadPlanOfPreviousDay")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult UpdateLoadPlanOfPreviousDay()
        {
            LoadPlansBusiness loadPlansBusiness = new LoadPlansBusiness(Context, ListdbTcContext, User);
            loadPlansBusiness.UpdateLoadPlanOfPreviousDay();
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
        }

        [HttpPatch]
        [Route("/load-plans/TodayAndLater")]
        [AllowAnonymous]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateLoadPlanTodayAndLater")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult UpdateLoadPlanTodayAndLater()
        {
            LoadPlansBusiness loadPlansBusiness = new LoadPlansBusiness(Context, ListdbTcContext, User);

            loadPlansBusiness.UpdateLoadPlanTodayAndLater();
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
        }
    }
}
