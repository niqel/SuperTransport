/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@tc.com.mx
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using AuthenticationHandler.Controllers;
using TmsTcAPI.DAL.Models;
using Viajes.Api.Business;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class HotelApiController : TmsControllerBase
    {
        protected HotelBusiness hotelBusiness;
        public HotelApiController(TmsTcEntities context) : base(context)
        {
            this.hotelBusiness = new HotelBusiness(context, User);
        }
        /// <summary>
        /// Consulta los hoteles
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/api/viajes/hotel")]
        [ValidateModelState]
        [SwaggerOperation("ApiViajesHotelGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(RHotel), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult ApiViajesHotelGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RHotel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"hotels\" : [ {\n      \"website\" : \"website\",\n      \"routeId\" : 6,\n      \"phone\" : \"phone\",\n      \"latitude\" : \"latitude\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"id\" : 0,\n      \"key\" : \"key\",\n      \"email\" : \"email\",\n      \"longitude\" : \"longitude\"\n    }, {\n      \"website\" : \"website\",\n      \"routeId\" : 6,\n      \"phone\" : \"phone\",\n      \"latitude\" : \"latitude\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"id\" : 0,\n      \"key\" : \"key\",\n      \"email\" : \"email\",\n      \"longitude\" : \"longitude\"\n    } ]\n  },\n  \"reply\" : {\n    \"code\" : 0,\n    \"message\" : \"message\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<RHotel>(exampleJson)
                        : default(RHotel);            //TODO: Change the data returned
            return new ObjectResult(this.hotelBusiness.HotelGet());
        }

        /// <summary>
        /// Añade un hotel
        /// </summary>
        /// <param name="body">Añade un hotel</param>
        /// <response code="201">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/api/viajes/hotel")]
        [ValidateModelState]
        [SwaggerOperation("ApiViajesHotelPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(CreatedId), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult ApiViajesHotelPost([FromBody]Hotel body)
        {
            CreatedId createdId = this.hotelBusiness.HotelPost(body);
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
             return StatusCode(201, createdId);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
           
            //return new ObjectResult();
        }

        /// <summary>
        /// Consulta los hoteles por ruta
        /// </summary>
        /// <param name="routeId">Es el id de la ruta</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/api/viajes/hotel/route/{routeId}")]
        [ValidateModelState]
        [SwaggerOperation("GetHotelByRouteId")]
        [SwaggerResponse(statusCode: 200, type: typeof(RHotel), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetHotelByRouteId([FromRoute][Required]int? routeId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RHotel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
         
                 
            return new ObjectResult(this.hotelBusiness.GetByRouteId(routeId));
        }
    }
}
