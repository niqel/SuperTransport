/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using AuthenticationHandler.Controllers;
using IO.Swagger.Business;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class InternalTransfersApiController : TmsControllerBase
    {
        public InternalTransfersApiController(TmsTcAPI.DAL.Models.TmsTcEntities context) : base(context)
        {
        }

        /// <summary>
        /// Añade una transferencia interoficina
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/internal-transfers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddInternalTransfer")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult AddInternalTransfer([FromBody]InternalTransfer body)
        {
            return new InternalTransfersBusiness(Context, User).AddInternalTransfer(body);
        }

        /// <summary>
        /// Obtiene las transferencias interoficina
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/internal-transfers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetInternalTransfers")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InternalTransfer>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetInternalTransfers()
        {
            return new InternalTransfersBusiness(Context, User).GetInternalTransfers();
        }

        /// <summary>
        /// Actualiza una transferencia interoficina
        /// </summary>
        /// <param name="body"></param>
        /// <param name="id">El id de la transferencia interoficina</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/internal-transfers/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateInternalTransfer")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        public virtual IActionResult UpdateInternalTransfer([FromBody]InternalTransfer body, [FromRoute][Required]int? id)
        {
            return new InternalTransfersBusiness(Context, User).UpdateInternalTransfer(body, id);
        }

        /// <summary>
        /// Obtiene los status de aprobación de las transferencias interoficina
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/internal-transfers/approval-status")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetInternalTransfersApprovalStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NamedEntity>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetInternalTransfersApprovalStatus()
        {
            return new InternalTransfersBusiness(Context, User).GetInternalTransfersApprovalStatus();
        }
    }
}
