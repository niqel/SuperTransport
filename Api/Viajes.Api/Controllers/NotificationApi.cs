/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Viajes.Api.Business;
using AuthenticationHandler.Controllers;
using CrmTc.DAL.Models;
using InnovaLinks.DAL.Models;
using ListdbTc.DAL.Models;
using TmsTcAPI.DAL.Models;
using NotificationService.Models;
using System.Threading.Tasks;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NotificationApiController : TmsControllerBase
    {
        protected TmsTcEntities TmsContext { get; private set; }
        protected CrmTcEntities CrmContext { get; private set; }
        protected InnovaLinksEntities InnovaLinksContext { get; private set; }
        protected ListdbTcEntities ListdbTcContext { get; private set; }
        protected OneSignalCredentials OneSignal { get; private set; }

        public NotificationApiController(TmsTcEntities context, InnovaLinksEntities innovaLinksContext, ListdbTcEntities listdbTcContext, CrmTcEntities crmContext, OneSignalCredentials oneSignal) : base(context)
        {
            TmsContext = context;
            CrmContext = crmContext;
            InnovaLinksContext = innovaLinksContext;
            ListdbTcContext = listdbTcContext;
            OneSignal = oneSignal;            
        }
        
        /// <summary>
        /// Generar notificación
        /// </summary>
        /// <param name="type"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/notification")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateNotification")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Notification>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult CreateNotification([FromQuery][Required()]Notification type)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Notification>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "[ {\n  \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"notificationStatus\" : {\n    \"name\" : \"name\",\n    \"id\" : 6\n  },\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0\n}, {\n  \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"notificationStatus\" : {\n    \"name\" : \"name\",\n    \"id\" : 6\n  },\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Notification>>(exampleJson)
                        : default(List<Notification>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Obtener notificaciones
        /// </summary>
        /// <param name="type"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/notification")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetNotification")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Notification>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetNotification([FromQuery][Required()]Notification type)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Notification>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "[ {\n  \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"notificationStatus\" : {\n    \"name\" : \"name\",\n    \"id\" : 6\n  },\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0\n}, {\n  \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"notificationStatus\" : {\n    \"name\" : \"name\",\n    \"id\" : 6\n  },\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Notification>>(exampleJson)
                        : default(List<Notification>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Obtener catálogo de estatus de notificación
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/notification/status")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetNotificationStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NotificationStatus>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetNotificationStatus()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NotificationStatus>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"id\" : 6\n}, {\n  \"name\" : \"name\",\n  \"id\" : 6\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NotificationStatus>>(exampleJson)
                        : default(List<NotificationStatus>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Enviar notificación
        /// </summary>
        /// <param name="type"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/notification/send-notification")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [AllowAnonymous]
        [SwaggerOperation("SendNotification")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public async Task<IActionResult> SendNotification()
        {            
            return await new NotificationBusiness(Context, CrmContext, InnovaLinksContext, ListdbTcContext, OneSignal, User).SendNotificationAsync();
        }

        /// <summary>
        /// Enviar correo de notificación
        /// </summary>
        /// <param name="type"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/notification/send-email")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [AllowAnonymous]
        [ValidateModelState]
        [SwaggerOperation("SendNotificationEmail")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Notification>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult SendNotificationEmail()
        {
            return new NotificationBusiness(Context, CrmContext, InnovaLinksContext, ListdbTcContext, OneSignal, User).SendNotificationEmail();
        }

        /// <summary>
        /// Enviar notificación
        /// </summary>
        /// <param name="idOperator">El id del operador</param>
        /// <param name="type"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/notification/send-notification/{idOperator}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SendNotificationIdOperator")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Notification>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult SendNotificationIdOperator([FromRoute][Required]int? idOperator, [FromQuery][Required()]Notification type)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Notification>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "[ {\n  \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"notificationStatus\" : {\n    \"name\" : \"name\",\n    \"id\" : 6\n  },\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0\n}, {\n  \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"notificationStatus\" : {\n    \"name\" : \"name\",\n    \"id\" : 6\n  },\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Notification>>(exampleJson)
                        : default(List<Notification>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Actualizar notificación
        /// </summary>
        /// <param name="type"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPatch]
        [Route("/notification")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateNotification")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Payment>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult UpdateNotification([FromQuery][Required()]LocationType type)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Payment>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "[ {\n  \"end_date\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"truck_id\" : 5,\n  \"travel_id\" : [ 6.027456183070403, 6.027456183070403 ],\n  \"operator_id\" : 1,\n  \"bonus\" : { },\n  \"payment_status\" : 5,\n  \"salary\" : \"\",\n  \"clearance_id\" : 2,\n  \"operator_type\" : \"operator_type\",\n  \"operator_name\" : \"operator_name\",\n  \"advances\" : \"\",\n  \"id\" : 0,\n  \"start_date\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"expenses\" : \"\"\n}, {\n  \"end_date\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"truck_id\" : 5,\n  \"travel_id\" : [ 6.027456183070403, 6.027456183070403 ],\n  \"operator_id\" : 1,\n  \"bonus\" : { },\n  \"payment_status\" : 5,\n  \"salary\" : \"\",\n  \"clearance_id\" : 2,\n  \"operator_type\" : \"operator_type\",\n  \"operator_name\" : \"operator_name\",\n  \"advances\" : \"\",\n  \"id\" : 0,\n  \"start_date\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"expenses\" : \"\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Payment>>(exampleJson)
                        : default(List<Payment>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
