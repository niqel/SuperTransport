/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Aclaración
    /// </summary>
    [DataContract]
    public partial class Clarification : IEquatable<Clarification>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseId
        /// </summary>

        [DataMember(Name="expense_id")]
        public int? ExpenseId { get; set; }

        /// <summary>
        /// Gets or Sets PayingId
        /// </summary>

        [DataMember(Name="paying_id")]
        public decimal? PayingId { get; set; }

        /// <summary>
        /// Gets or Sets TravelId
        /// </summary>

        [DataMember(Name="travel_id")]
        public decimal? TravelId { get; set; }

        /// <summary>
        /// Gets or Sets OperatorId
        /// </summary>

        [DataMember(Name="operator_id")]
        public int? OperatorId { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>

        [DataMember(Name="date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Concept
        /// </summary>

        [DataMember(Name="concept")]
        public string Concept { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>

        [DataMember(Name="amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>

        [DataMember(Name="comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Expenses
        /// </summary>

        [DataMember(Name="expenses")]
        public double? Expenses { get; set; }

        /// <summary>
        /// Gets or Sets Evidences
        /// </summary>

        [DataMember(Name="evidences")]
        public List<decimal?> Evidences { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAmount
        /// </summary>

        [DataMember(Name="requested_amount")]
        public double? RequestedAmount { get; set; }

        /// <summary>
        /// Gets or Sets DepositedAmount
        /// </summary>

        [DataMember(Name="deposited_amount")]
        public double? DepositedAmount { get; set; }

        /// <summary>
        /// Gets or Sets ClarificationStatusId
        /// </summary>

        [DataMember(Name="clarification_status_id")]
        public int? ClarificationStatusId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Clarification {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExpenseId: ").Append(ExpenseId).Append("\n");
            sb.Append("  PayingId: ").Append(PayingId).Append("\n");
            sb.Append("  TravelId: ").Append(TravelId).Append("\n");
            sb.Append("  OperatorId: ").Append(OperatorId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Concept: ").Append(Concept).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Expenses: ").Append(Expenses).Append("\n");
            sb.Append("  Evidences: ").Append(Evidences).Append("\n");
            sb.Append("  RequestedAmount: ").Append(RequestedAmount).Append("\n");
            sb.Append("  DepositedAmount: ").Append(DepositedAmount).Append("\n");
            sb.Append("  ClarificationStatusId: ").Append(ClarificationStatusId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Clarification)obj);
        }

        /// <summary>
        /// Returns true if Clarification instances are equal
        /// </summary>
        /// <param name="other">Instance of Clarification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Clarification other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ExpenseId == other.ExpenseId ||
                    ExpenseId != null &&
                    ExpenseId.Equals(other.ExpenseId)
                ) && 
                (
                    PayingId == other.PayingId ||
                    PayingId != null &&
                    PayingId.Equals(other.PayingId)
                ) && 
                (
                    TravelId == other.TravelId ||
                    TravelId != null &&
                    TravelId.Equals(other.TravelId)
                ) && 
                (
                    OperatorId == other.OperatorId ||
                    OperatorId != null &&
                    OperatorId.Equals(other.OperatorId)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Concept == other.Concept ||
                    Concept != null &&
                    Concept.Equals(other.Concept)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    Expenses == other.Expenses ||
                    Expenses != null &&
                    Expenses.Equals(other.Expenses)
                ) && 
                (
                    Evidences == other.Evidences ||
                    Evidences != null &&
                    Evidences.SequenceEqual(other.Evidences)
                ) && 
                (
                    RequestedAmount == other.RequestedAmount ||
                    RequestedAmount != null &&
                    RequestedAmount.Equals(other.RequestedAmount)
                ) && 
                (
                    DepositedAmount == other.DepositedAmount ||
                    DepositedAmount != null &&
                    DepositedAmount.Equals(other.DepositedAmount)
                ) && 
                (
                    ClarificationStatusId == other.ClarificationStatusId ||
                    ClarificationStatusId != null &&
                    ClarificationStatusId.Equals(other.ClarificationStatusId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ExpenseId != null)
                    hashCode = hashCode * 59 + ExpenseId.GetHashCode();
                    if (PayingId != null)
                    hashCode = hashCode * 59 + PayingId.GetHashCode();
                    if (TravelId != null)
                    hashCode = hashCode * 59 + TravelId.GetHashCode();
                    if (OperatorId != null)
                    hashCode = hashCode * 59 + OperatorId.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Concept != null)
                    hashCode = hashCode * 59 + Concept.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (Expenses != null)
                    hashCode = hashCode * 59 + Expenses.GetHashCode();
                    if (Evidences != null)
                    hashCode = hashCode * 59 + Evidences.GetHashCode();
                    if (RequestedAmount != null)
                    hashCode = hashCode * 59 + RequestedAmount.GetHashCode();
                    if (DepositedAmount != null)
                    hashCode = hashCode * 59 + DepositedAmount.GetHashCode();
                    if (ClarificationStatusId != null)
                    hashCode = hashCode * 59 + ClarificationStatusId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Clarification left, Clarification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Clarification left, Clarification right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
