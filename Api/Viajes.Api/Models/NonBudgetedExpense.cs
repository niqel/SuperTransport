/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@tc.com.mx
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Gasto no presupuestado
    /// </summary>
    [DataContract]
    public partial class NonBudgetedExpense : IEquatable<NonBudgetedExpense>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsBillable
        /// </summary>

        [DataMember(Name="isBillable")]
        public bool? IsBillable { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>

        [DataMember(Name="date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>

        [DataMember(Name="comments")]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>

        [DataMember(Name="amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets TripId
        /// </summary>

        [DataMember(Name="tripId")]
        public int? TripId { get; private set; }

        /// <summary>
        /// Gets or Sets Trip
        /// </summary>

        [DataMember(Name="trip")]
        public Trip Trip { get; set; }

        /// <summary>
        /// Gets or Sets OperatorId
        /// </summary>

        [DataMember(Name="operatorId")]
        public int? OperatorId { get; set; }

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>

        [DataMember(Name="operator")]
        public Operator Operator { get; set; }

        /// <summary>
        /// Gets or Sets NonBudgetedExpenseStatusId
        /// </summary>

        [DataMember(Name="nonBudgetedExpenseStatusId")]
        public int? NonBudgetedExpenseStatusId { get; set; }

        /// <summary>
        /// Gets or Sets NonBudgetedExpenseStatus
        /// </summary>

        [DataMember(Name="nonBudgetedExpenseStatus")]
        public NonBudgetedExpenseStatus NonBudgetedExpenseStatus { get; set; }

        /// <summary>
        /// Gets or Sets NonBudgetedExpenseTypeId
        /// </summary>

        [DataMember(Name="nonBudgetedExpenseTypeId")]
        public int? NonBudgetedExpenseTypeId { get; set; }

        /// <summary>
        /// Gets or Sets NonBudgetedExpenseType
        /// </summary>

        [DataMember(Name="nonBudgetedExpenseType")]
        public NonBudgetedExpenseType NonBudgetedExpenseType { get; set; }

        /// <summary>
        /// Gets or Sets EvidenceNonBudgetedExpense
        /// </summary>

        [DataMember(Name="evidenceNonBudgetedExpense")]
        public List<EvidenceNonBudgetedExpense> EvidenceNonBudgetedExpense { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NonBudgetedExpense {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsBillable: ").Append(IsBillable).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TripId: ").Append(TripId).Append("\n");
            sb.Append("  Trip: ").Append(Trip).Append("\n");
            sb.Append("  OperatorId: ").Append(OperatorId).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  NonBudgetedExpenseStatusId: ").Append(NonBudgetedExpenseStatusId).Append("\n");
            sb.Append("  NonBudgetedExpenseStatus: ").Append(NonBudgetedExpenseStatus).Append("\n");
            sb.Append("  NonBudgetedExpenseTypeId: ").Append(NonBudgetedExpenseTypeId).Append("\n");
            sb.Append("  NonBudgetedExpenseType: ").Append(NonBudgetedExpenseType).Append("\n");
            sb.Append("  EvidenceNonBudgetedExpense: ").Append(EvidenceNonBudgetedExpense).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NonBudgetedExpense)obj);
        }

        /// <summary>
        /// Returns true if NonBudgetedExpense instances are equal
        /// </summary>
        /// <param name="other">Instance of NonBudgetedExpense to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NonBudgetedExpense other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsBillable == other.IsBillable ||
                    IsBillable != null &&
                    IsBillable.Equals(other.IsBillable)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Comments == other.Comments ||
                    Comments != null &&
                    Comments.Equals(other.Comments)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    TripId == other.TripId ||
                    TripId != null &&
                    TripId.Equals(other.TripId)
                ) && 
                (
                    Trip == other.Trip ||
                    Trip != null &&
                    Trip.Equals(other.Trip)
                ) && 
                (
                    OperatorId == other.OperatorId ||
                    OperatorId != null &&
                    OperatorId.Equals(other.OperatorId)
                ) && 
                (
                    Operator == other.Operator ||
                    Operator != null &&
                    Operator.Equals(other.Operator)
                ) && 
                (
                    NonBudgetedExpenseStatusId == other.NonBudgetedExpenseStatusId ||
                    NonBudgetedExpenseStatusId != null &&
                    NonBudgetedExpenseStatusId.Equals(other.NonBudgetedExpenseStatusId)
                ) && 
                (
                    NonBudgetedExpenseStatus == other.NonBudgetedExpenseStatus ||
                    NonBudgetedExpenseStatus != null &&
                    NonBudgetedExpenseStatus.Equals(other.NonBudgetedExpenseStatus)
                ) && 
                (
                    NonBudgetedExpenseTypeId == other.NonBudgetedExpenseTypeId ||
                    NonBudgetedExpenseTypeId != null &&
                    NonBudgetedExpenseTypeId.Equals(other.NonBudgetedExpenseTypeId)
                ) && 
                (
                    NonBudgetedExpenseType == other.NonBudgetedExpenseType ||
                    NonBudgetedExpenseType != null &&
                    NonBudgetedExpenseType.Equals(other.NonBudgetedExpenseType)
                ) && 
                (
                    EvidenceNonBudgetedExpense == other.EvidenceNonBudgetedExpense ||
                    EvidenceNonBudgetedExpense != null &&
                    EvidenceNonBudgetedExpense.SequenceEqual(other.EvidenceNonBudgetedExpense)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IsBillable != null)
                    hashCode = hashCode * 59 + IsBillable.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Comments != null)
                    hashCode = hashCode * 59 + Comments.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (TripId != null)
                    hashCode = hashCode * 59 + TripId.GetHashCode();
                    if (Trip != null)
                    hashCode = hashCode * 59 + Trip.GetHashCode();
                    if (OperatorId != null)
                    hashCode = hashCode * 59 + OperatorId.GetHashCode();
                    if (Operator != null)
                    hashCode = hashCode * 59 + Operator.GetHashCode();
                    if (NonBudgetedExpenseStatusId != null)
                    hashCode = hashCode * 59 + NonBudgetedExpenseStatusId.GetHashCode();
                    if (NonBudgetedExpenseStatus != null)
                    hashCode = hashCode * 59 + NonBudgetedExpenseStatus.GetHashCode();
                    if (NonBudgetedExpenseTypeId != null)
                    hashCode = hashCode * 59 + NonBudgetedExpenseTypeId.GetHashCode();
                    if (NonBudgetedExpenseType != null)
                    hashCode = hashCode * 59 + NonBudgetedExpenseType.GetHashCode();
                    if (EvidenceNonBudgetedExpense != null)
                    hashCode = hashCode * 59 + EvidenceNonBudgetedExpense.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NonBudgetedExpense left, NonBudgetedExpense right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NonBudgetedExpense left, NonBudgetedExpense right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
