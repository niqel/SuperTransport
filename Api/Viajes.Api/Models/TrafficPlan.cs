/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@tc.com.mx
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TrafficPlan : BaseEntity, IEquatable<TrafficPlan>
    {
        /// <summary>
        /// Gets or Sets MarketType
        /// </summary>
        [Required]

        [DataMember(Name = "market_type")]
        public NamedEntity MarketType { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [Required]

        [DataMember(Name = "customer")]
        public NamedEntity Customer { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [Required]

        [DataMember(Name = "origin")]
        public Location Origin { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [Required]

        [DataMember(Name = "destination")]
        public Location Destination { get; set; }

        /// <summary>
        /// Gets or Sets ReturnTo
        /// </summary>

        [DataMember(Name = "return_to")]
        public Location ReturnTo { get; set; }

        /// <summary>
        /// Fecha de inicio
        /// </summary>
        /// <value>Fecha de inicio</value>
        [Required]

        [DataMember(Name = "start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Fecha de regreso
        /// </summary>
        /// <value>Fecha de regreso</value>

        [DataMember(Name = "end_date")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Truck
        /// </summary>
        [Required]

        [DataMember(Name = "truck")]
        public NamedEntity Truck { get; set; }

        /// <summary>
        /// Gets or Sets TruckOperator
        /// </summary>

        [DataMember(Name = "truck_operator")]
        public NamedEntity TruckOperator { get; set; }

        /// <summary>
        /// Razón del movimiento
        /// </summary>
        /// <value>Razón del movimiento</value>

        [DataMember(Name = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// La entidad fue modificada manualmente regreso o fecha
        /// </summary>
        /// <value>La entidad fue modificada manualmente regreso o fecha</value>

        [DataMember(Name = "setManually")]
        public bool? SetManually { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrafficPlan {\n");
            sb.Append("  MarketType: ").Append(MarketType).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  ReturnTo: ").Append(ReturnTo).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Truck: ").Append(Truck).Append("\n");
            sb.Append("  TruckOperator: ").Append(TruckOperator).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  SetManually: ").Append(SetManually).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TrafficPlan)obj);
        }

        /// <summary>
        /// Returns true if TrafficPlan instances are equal
        /// </summary>
        /// <param name="other">Instance of TrafficPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrafficPlan other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    MarketType == other.MarketType ||
                    MarketType != null &&
                    MarketType.Equals(other.MarketType)
                ) &&
                (
                    Customer == other.Customer ||
                    Customer != null &&
                    Customer.Equals(other.Customer)
                ) &&
                (
                    Origin == other.Origin ||
                    Origin != null &&
                    Origin.Equals(other.Origin)
                ) &&
                (
                    Destination == other.Destination ||
                    Destination != null &&
                    Destination.Equals(other.Destination)
                ) &&
                (
                    ReturnTo == other.ReturnTo ||
                    ReturnTo != null &&
                    ReturnTo.Equals(other.ReturnTo)
                ) &&
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) &&
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) &&
                (
                    Truck == other.Truck ||
                    Truck != null &&
                    Truck.Equals(other.Truck)
                ) &&
                (
                    TruckOperator == other.TruckOperator ||
                    TruckOperator != null &&
                    TruckOperator.Equals(other.TruckOperator)
                ) &&
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) &&
                (
                    SetManually == other.SetManually ||
                    SetManually != null &&
                    SetManually.Equals(other.SetManually)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (MarketType != null)
                    hashCode = hashCode * 59 + MarketType.GetHashCode();
                if (Customer != null)
                    hashCode = hashCode * 59 + Customer.GetHashCode();
                if (Origin != null)
                    hashCode = hashCode * 59 + Origin.GetHashCode();
                if (Destination != null)
                    hashCode = hashCode * 59 + Destination.GetHashCode();
                if (ReturnTo != null)
                    hashCode = hashCode * 59 + ReturnTo.GetHashCode();
                if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                if (Truck != null)
                    hashCode = hashCode * 59 + Truck.GetHashCode();
                if (TruckOperator != null)
                    hashCode = hashCode * 59 + TruckOperator.GetHashCode();
                if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                if (SetManually != null)
                    hashCode = hashCode * 59 + SetManually.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(TrafficPlan left, TrafficPlan right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TrafficPlan left, TrafficPlan right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}