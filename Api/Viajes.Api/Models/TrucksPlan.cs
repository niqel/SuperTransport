/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TrucksPlan : IEquatable<TrucksPlan>
    { 
        /// <summary>
        /// Demanda
        /// </summary>
        /// <value>Demanda</value>
        [DataMember(Name="demand")]
        public List<CustomerDemand> Demand { get; set; }

        /// <summary>
        /// Posicionados
        /// </summary>
        /// <value>Posicionados</value>
        [DataMember(Name="positioned")]
        public List<Truck> Positioned { get; set; }

        /// <summary>
        /// Llegadas
        /// </summary>
        /// <value>Llegadas</value>
        [DataMember(Name="arrivals")]
        public List<Truck> Arrivals { get; set; }

        /// <summary>
        /// Completado
        /// </summary>
        /// <value>Completado</value>
        [DataMember(Name="completed")]
        public bool? Completed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrucksPlan {\n");
            sb.Append("  Demand: ").Append(Demand).Append("\n");
            sb.Append("  Positioned: ").Append(Positioned).Append("\n");
            sb.Append("  Arrivals: ").Append(Arrivals).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TrucksPlan)obj);
        }

        /// <summary>
        /// Returns true if TrucksPlan instances are equal
        /// </summary>
        /// <param name="other">Instance of TrucksPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrucksPlan other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Demand == other.Demand ||
                    Demand != null &&
                    Demand.SequenceEqual(other.Demand)
                ) && 
                (
                    Positioned == other.Positioned ||
                    Positioned != null &&
                    Positioned.SequenceEqual(other.Positioned)
                ) && 
                (
                    Arrivals == other.Arrivals ||
                    Arrivals != null &&
                    Arrivals.SequenceEqual(other.Arrivals)
                ) && 
                (
                    Completed == other.Completed ||
                    Completed != null &&
                    Completed.Equals(other.Completed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Demand != null)
                    hashCode = hashCode * 59 + Demand.GetHashCode();
                    if (Positioned != null)
                    hashCode = hashCode * 59 + Positioned.GetHashCode();
                    if (Arrivals != null)
                    hashCode = hashCode * 59 + Arrivals.GetHashCode();
                    if (Completed != null)
                    hashCode = hashCode * 59 + Completed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TrucksPlan left, TrucksPlan right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TrucksPlan left, TrucksPlan right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
