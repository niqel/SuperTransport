/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Liquidación
    /// </summary>
    [DataContract]
    public partial class Payment : IEquatable<Payment>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets TravelId
        /// </summary>

        [DataMember(Name="travel_id")]
        public List<decimal?> TravelId { get; set; }

        /// <summary>
        /// Gets or Sets OperatorId
        /// </summary>

        [DataMember(Name="operator_id")]
        public int? OperatorId { get; set; }

        /// <summary>
        /// Gets or Sets OperatorName
        /// </summary>

        [DataMember(Name="operator_name")]
        public string OperatorName { get; set; }

        /// <summary>
        /// Gets or Sets OperatorType
        /// </summary>

        [DataMember(Name="operator_type")]
        public string OperatorType { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>

        [DataMember(Name="end_date")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets TruckId
        /// </summary>

        [DataMember(Name="truck_id")]
        public int? TruckId { get; set; }

        /// <summary>
        /// Gets or Sets Bonus
        /// </summary>

        [DataMember(Name="bonus")]
        public Object Bonus { get; set; }

        /// <summary>
        /// Gets or Sets Advances
        /// </summary>

        [DataMember(Name="advances")]
        public List<Advance> Advances { get; set; }

        /// <summary>
        /// Gets or Sets Expenses
        /// </summary>

        [DataMember(Name="expenses")]
        public List<Expense> Expenses { get; set; }

        /// <summary>
        /// Gets or Sets Salarys
        /// </summary>

        [DataMember(Name="salarys")]
        public List<Salary> Salarys { get; set; }

        /// <summary>
        /// Gets or Sets PaymentStatus
        /// </summary>

        [DataMember(Name="payment_status")]
        public int? PaymentStatus { get; set; }

        /// <summary>
        /// Gets or Sets ClearanceId
        /// </summary>

        [DataMember(Name="clearance_id")]
        public int? ClearanceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TravelId: ").Append(TravelId).Append("\n");
            sb.Append("  OperatorId: ").Append(OperatorId).Append("\n");
            sb.Append("  OperatorName: ").Append(OperatorName).Append("\n");
            sb.Append("  OperatorType: ").Append(OperatorType).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  TruckId: ").Append(TruckId).Append("\n");
            sb.Append("  Bonus: ").Append(Bonus).Append("\n");
            sb.Append("  Advances: ").Append(Advances).Append("\n");
            sb.Append("  Expenses: ").Append(Expenses).Append("\n");
            sb.Append("  Salarys: ").Append(Salarys).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  ClearanceId: ").Append(ClearanceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Payment)obj);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="other">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    TravelId == other.TravelId ||
                    TravelId != null &&
                    TravelId.SequenceEqual(other.TravelId)
                ) && 
                (
                    OperatorId == other.OperatorId ||
                    OperatorId != null &&
                    OperatorId.Equals(other.OperatorId)
                ) && 
                (
                    OperatorName == other.OperatorName ||
                    OperatorName != null &&
                    OperatorName.Equals(other.OperatorName)
                ) && 
                (
                    OperatorType == other.OperatorType ||
                    OperatorType != null &&
                    OperatorType.Equals(other.OperatorType)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    TruckId == other.TruckId ||
                    TruckId != null &&
                    TruckId.Equals(other.TruckId)
                ) && 
                (
                    Bonus == other.Bonus ||
                    Bonus != null &&
                    Bonus.Equals(other.Bonus)
                ) && 
                (
                    Advances == other.Advances ||
                    Advances != null &&
                    Advances.SequenceEqual(other.Advances)
                ) && 
                (
                    Expenses == other.Expenses ||
                    Expenses != null &&
                    Expenses.SequenceEqual(other.Expenses)
                ) && 
                (
                    Salarys == other.Salarys ||
                    Salarys != null &&
                    Salarys.SequenceEqual(other.Salarys)
                ) && 
                (
                    PaymentStatus == other.PaymentStatus ||
                    PaymentStatus != null &&
                    PaymentStatus.Equals(other.PaymentStatus)
                ) && 
                (
                    ClearanceId == other.ClearanceId ||
                    ClearanceId != null &&
                    ClearanceId.Equals(other.ClearanceId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (TravelId != null)
                    hashCode = hashCode * 59 + TravelId.GetHashCode();
                    if (OperatorId != null)
                    hashCode = hashCode * 59 + OperatorId.GetHashCode();
                    if (OperatorName != null)
                    hashCode = hashCode * 59 + OperatorName.GetHashCode();
                    if (OperatorType != null)
                    hashCode = hashCode * 59 + OperatorType.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (TruckId != null)
                    hashCode = hashCode * 59 + TruckId.GetHashCode();
                    if (Bonus != null)
                    hashCode = hashCode * 59 + Bonus.GetHashCode();
                    if (Advances != null)
                    hashCode = hashCode * 59 + Advances.GetHashCode();
                    if (Expenses != null)
                    hashCode = hashCode * 59 + Expenses.GetHashCode();
                    if (Salarys != null)
                    hashCode = hashCode * 59 + Salarys.GetHashCode();
                    if (PaymentStatus != null)
                    hashCode = hashCode * 59 + PaymentStatus.GetHashCode();
                    if (ClearanceId != null)
                    hashCode = hashCode * 59 + ClearanceId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Payment left, Payment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Payment left, Payment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
