/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Son los datos del tractor
    /// </summary>
    [DataContract]
    public partial class TruckNotAvailable : IEquatable<TruckNotAvailable>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TypeTractor
        /// </summary>

        [DataMember(Name="typeTractor")]
        public TypeTruck TypeTractor { get; set; }

        /// <summary>
        /// Gets or Sets IdOperator
        /// </summary>

        [DataMember(Name="idOperator")]
        public int? IdOperator { get; set; }

        /// <summary>
        /// Gets or Sets NameOperator
        /// </summary>

        [DataMember(Name="NameOperator")]
        public string NameOperator { get; set; }

        /// <summary>
        /// Gets or Sets LastDateTraveled
        /// </summary>

        [DataMember(Name="lastDateTraveled")]
        public DateTime? LastDateTraveled { get; set; }

        /// <summary>
        /// Gets or Sets DaysNotAvailable
        /// </summary>

        [DataMember(Name="daysNotAvailable")]
        public int? DaysNotAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TruckNotAvailable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TypeTractor: ").Append(TypeTractor).Append("\n");
            sb.Append("  IdOperator: ").Append(IdOperator).Append("\n");
            sb.Append("  NameOperator: ").Append(NameOperator).Append("\n");
            sb.Append("  LastDateTraveled: ").Append(LastDateTraveled).Append("\n");
            sb.Append("  DaysNotAvailable: ").Append(DaysNotAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TruckNotAvailable)obj);
        }

        /// <summary>
        /// Returns true if TruckNotAvailable instances are equal
        /// </summary>
        /// <param name="other">Instance of TruckNotAvailable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TruckNotAvailable other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    TypeTractor == other.TypeTractor ||
                    TypeTractor != null &&
                    TypeTractor.Equals(other.TypeTractor)
                ) && 
                (
                    IdOperator == other.IdOperator ||
                    IdOperator != null &&
                    IdOperator.Equals(other.IdOperator)
                ) && 
                (
                    NameOperator == other.NameOperator ||
                    NameOperator != null &&
                    NameOperator.Equals(other.NameOperator)
                ) && 
                (
                    LastDateTraveled == other.LastDateTraveled ||
                    LastDateTraveled != null &&
                    LastDateTraveled.Equals(other.LastDateTraveled)
                ) && 
                (
                    DaysNotAvailable == other.DaysNotAvailable ||
                    DaysNotAvailable != null &&
                    DaysNotAvailable.Equals(other.DaysNotAvailable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (TypeTractor != null)
                    hashCode = hashCode * 59 + TypeTractor.GetHashCode();
                    if (IdOperator != null)
                    hashCode = hashCode * 59 + IdOperator.GetHashCode();
                    if (NameOperator != null)
                    hashCode = hashCode * 59 + NameOperator.GetHashCode();
                    if (LastDateTraveled != null)
                    hashCode = hashCode * 59 + LastDateTraveled.GetHashCode();
                    if (DaysNotAvailable != null)
                    hashCode = hashCode * 59 + DaysNotAvailable.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TruckNotAvailable left, TruckNotAvailable right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TruckNotAvailable left, TruckNotAvailable right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
