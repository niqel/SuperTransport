/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@tc.com.mx
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Trip : IEquatable<Trip>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets TripZamId
        /// </summary>

        [DataMember(Name="tripZamId")]
        public int? TripZamId { get; set; }

        /// <summary>
        /// Gets or Sets OriginId
        /// </summary>

        [DataMember(Name="originId")]
        public int? OriginId { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>

        [DataMember(Name="origin")]
        public Origin Origin { get; set; }

        /// <summary>
        /// Gets or Sets DestinationId
        /// </summary>

        [DataMember(Name="destinationId")]
        public int? DestinationId { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>

        [DataMember(Name="destination")]
        public Destination Destination { get; set; }

        /// <summary>
        /// Gets or Sets ReturnToId
        /// </summary>

        [DataMember(Name="returnToId")]
        public int? ReturnToId { get; set; }

        /// <summary>
        /// Gets or Sets ReturnTo
        /// </summary>

        [DataMember(Name="returnTo")]
        public ReturnTo ReturnTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Trip {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TripZamId: ").Append(TripZamId).Append("\n");
            sb.Append("  OriginId: ").Append(OriginId).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  ReturnToId: ").Append(ReturnToId).Append("\n");
            sb.Append("  ReturnTo: ").Append(ReturnTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Trip)obj);
        }

        /// <summary>
        /// Returns true if Trip instances are equal
        /// </summary>
        /// <param name="other">Instance of Trip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trip other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    TripZamId == other.TripZamId ||
                    TripZamId != null &&
                    TripZamId.Equals(other.TripZamId)
                ) && 
                (
                    OriginId == other.OriginId ||
                    OriginId != null &&
                    OriginId.Equals(other.OriginId)
                ) && 
                (
                    Origin == other.Origin ||
                    Origin != null &&
                    Origin.Equals(other.Origin)
                ) && 
                (
                    DestinationId == other.DestinationId ||
                    DestinationId != null &&
                    DestinationId.Equals(other.DestinationId)
                ) && 
                (
                    Destination == other.Destination ||
                    Destination != null &&
                    Destination.Equals(other.Destination)
                ) && 
                (
                    ReturnToId == other.ReturnToId ||
                    ReturnToId != null &&
                    ReturnToId.Equals(other.ReturnToId)
                ) && 
                (
                    ReturnTo == other.ReturnTo ||
                    ReturnTo != null &&
                    ReturnTo.Equals(other.ReturnTo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (TripZamId != null)
                    hashCode = hashCode * 59 + TripZamId.GetHashCode();
                    if (OriginId != null)
                    hashCode = hashCode * 59 + OriginId.GetHashCode();
                    if (Origin != null)
                    hashCode = hashCode * 59 + Origin.GetHashCode();
                    if (DestinationId != null)
                    hashCode = hashCode * 59 + DestinationId.GetHashCode();
                    if (Destination != null)
                    hashCode = hashCode * 59 + Destination.GetHashCode();
                    if (ReturnToId != null)
                    hashCode = hashCode * 59 + ReturnToId.GetHashCode();
                    if (ReturnTo != null)
                    hashCode = hashCode * 59 + ReturnTo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Trip left, Trip right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Trip left, Trip right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
