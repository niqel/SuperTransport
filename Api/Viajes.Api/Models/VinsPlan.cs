/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VinsPlan : IEquatable<VinsPlan>
    { 
        /// <summary>
        /// Cantidad de Vins en el Plan
        /// </summary>
        /// <value>Cantidad de Vins en el Plan</value>
        [DataMember(Name="planned")]
        public int? Planned { get; set; }

        /// <summary>
        /// Cantidad de Vins Posicionados
        /// </summary>
        /// <value>Cantidad de Vins Posicionados</value>
        [DataMember(Name="positioned")]
        public int? Positioned { get; set; }

        /// <summary>
        /// Cantidad de Vins Cargados
        /// </summary>
        /// <value>Cantidad de Vins Cargados</value>
        [DataMember(Name="loaded")]
        public int? Loaded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VinsPlan {\n");
            sb.Append("  Planned: ").Append(Planned).Append("\n");
            sb.Append("  Positioned: ").Append(Positioned).Append("\n");
            sb.Append("  Loaded: ").Append(Loaded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VinsPlan)obj);
        }

        /// <summary>
        /// Returns true if VinsPlan instances are equal
        /// </summary>
        /// <param name="other">Instance of VinsPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VinsPlan other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Planned == other.Planned ||
                    Planned != null &&
                    Planned.Equals(other.Planned)
                ) && 
                (
                    Positioned == other.Positioned ||
                    Positioned != null &&
                    Positioned.Equals(other.Positioned)
                ) && 
                (
                    Loaded == other.Loaded ||
                    Loaded != null &&
                    Loaded.Equals(other.Loaded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Planned != null)
                    hashCode = hashCode * 59 + Planned.GetHashCode();
                    if (Positioned != null)
                    hashCode = hashCode * 59 + Positioned.GetHashCode();
                    if (Loaded != null)
                    hashCode = hashCode * 59 + Loaded.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VinsPlan left, VinsPlan right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VinsPlan left, VinsPlan right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
