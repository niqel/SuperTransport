/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CustomerDemand : IEquatable<CustomerDemand>
    { 
        /// <summary>
        /// Cliente
        /// </summary>
        /// <value>Cliente</value>
        [DataMember(Name="customer")]
        public int? Customer { get; set; }

        /// <summary>
        /// Prioridad del cliente
        /// </summary>
        /// <value>Prioridad del cliente</value>
        [DataMember(Name="customer_priority")]
        public int? CustomerPriority { get; set; }

        /// <summary>
        /// Tipo de Mercado
        /// </summary>
        /// <value>Tipo de Mercado</value>
        [DataMember(Name="market_type")]
        public int? MarketType { get; set; }

        /// <summary>
        /// Demanda
        /// </summary>
        /// <value>Demanda</value>
        [DataMember(Name="demand")]
        public int? Demand { get; set; }
        public int Positioned { get; set; }
        public int Arrivals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerDemand {\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  CustomerPriority: ").Append(CustomerPriority).Append("\n");
            sb.Append("  MarketType: ").Append(MarketType).Append("\n");
            sb.Append("  Demand: ").Append(Demand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomerDemand)obj);
        }

        /// <summary>
        /// Returns true if CustomerDemand instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomerDemand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerDemand other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Customer == other.Customer ||
                    Customer != null &&
                    Customer.Equals(other.Customer)
                ) && 
                (
                    CustomerPriority == other.CustomerPriority ||
                    CustomerPriority != null &&
                    CustomerPriority.Equals(other.CustomerPriority)
                ) && 
                (
                    MarketType == other.MarketType ||
                    MarketType != null &&
                    MarketType.Equals(other.MarketType)
                ) && 
                (
                    Demand == other.Demand ||
                    Demand != null &&
                    Demand.Equals(other.Demand)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Customer != null)
                    hashCode = hashCode * 59 + Customer.GetHashCode();
                    if (CustomerPriority != null)
                    hashCode = hashCode * 59 + CustomerPriority.GetHashCode();
                    if (MarketType != null)
                    hashCode = hashCode * 59 + MarketType.GetHashCode();
                    if (Demand != null)
                    hashCode = hashCode * 59 + Demand.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomerDemand left, CustomerDemand right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomerDemand left, CustomerDemand right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
