/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OperatorTruck : IEquatable<OperatorTruck>
    { 
        /// <summary>
        /// el identificador del tractor tsm
        /// </summary>
        /// <value>el identificador del tractor tsm</value>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// es el identificador de tractor de zam
        /// </summary>
        /// <value>es el identificador de tractor de zam</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// El modelo del tractor
        /// </summary>
        /// <value>El modelo del tractor</value>

        [DataMember(Name="model")]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets TruckType
        /// </summary>

        [DataMember(Name="truckType")]
        public OperatorTruckType TruckType { get; set; }

        /// <summary>
        /// Gets or Sets Towings
        /// </summary>

        [DataMember(Name="towings")]
        public List<Towing> Towings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperatorTruck {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  TruckType: ").Append(TruckType).Append("\n");
            sb.Append("  Towings: ").Append(Towings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OperatorTruck)obj);
        }

        /// <summary>
        /// Returns true if OperatorTruck instances are equal
        /// </summary>
        /// <param name="other">Instance of OperatorTruck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperatorTruck other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    TruckType == other.TruckType ||
                    TruckType != null &&
                    TruckType.Equals(other.TruckType)
                ) && 
                (
                    Towings == other.Towings ||
                    Towings != null &&
                    Towings.SequenceEqual(other.Towings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (TruckType != null)
                    hashCode = hashCode * 59 + TruckType.GetHashCode();
                    if (Towings != null)
                    hashCode = hashCode * 59 + Towings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OperatorTruck left, OperatorTruck right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OperatorTruck left, OperatorTruck right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
