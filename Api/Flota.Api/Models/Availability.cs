/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Availability : IEquatable<Availability>
    { 
        /// <summary>
        /// La fecha de inicio del cambio de disponibilidad
        /// </summary>
        /// <value>La fecha de inicio del cambio de disponibilidad</value>
        [Required]
        [DataMember(Name="date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Indica si el operador esta disponible
        /// </summary>
        /// <value>Indica si el operador esta disponible</value>
        [Required]
        [DataMember(Name="available")]
        public bool? Available { get; set; }

        /// <summary>
        /// Indica la razón de la disponibilidad del tractor
        /// </summary>
        /// <value>Indica la razón de la disponibilidad del tractor</value>
        [DataMember(Name="availability_reason")]
        public int? AvailabilityReason { get; set; }

        /// <summary>
        /// Indica la localización esperada de este empleado tras su cambio de disponibilidad
        /// </summary>
        /// <value>Indica la localización esperada de este empleado tras su cambio de disponibilidad</value>
        [DataMember(Name="location")]
        public int? Location { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Availability {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  AvailabilityReason: ").Append(AvailabilityReason).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Availability)obj);
        }

        /// <summary>
        /// Returns true if Availability instances are equal
        /// </summary>
        /// <param name="other">Instance of Availability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Availability other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Available == other.Available ||
                    Available != null &&
                    Available.Equals(other.Available)
                ) && 
                (
                    AvailabilityReason == other.AvailabilityReason ||
                    AvailabilityReason != null &&
                    AvailabilityReason.Equals(other.AvailabilityReason)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Available != null)
                    hashCode = hashCode * 59 + Available.GetHashCode();
                    if (AvailabilityReason != null)
                    hashCode = hashCode * 59 + AvailabilityReason.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Availability left, Availability right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Availability left, Availability right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
