/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using AuthenticationHandler.Controllers;
using IO.Swagger.Business;
using InnovaLinks.DAL.Models;
using Microsoft.Extensions.Localization;
using Flota.Api.Localize;
using CrmTc.DAL.Models;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TrucksApiController : TmsControllerBase
    {
        protected CrmTcEntities CrmContext { get; private set; }
        protected InnovaLinksEntities InnovaLinksContext { get; private set; }
        private readonly IStringLocalizer<Resource> localizer;

        public TrucksApiController(TmsTcAPI.DAL.Models.TmsTcEntities context, CrmTcEntities crmContext, InnovaLinksEntities innovaLinksContext, IStringLocalizer<Resource> localizer) : base(context)
        {
            CrmContext = crmContext;
            InnovaLinksContext = innovaLinksContext;
            this.localizer = localizer;
        }

        /// <summary>
        /// Obtiene la información necesaria para el Visor Satelital
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/trucks/satellite-view")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetSatelliteView")]
        [SwaggerResponse(statusCode: 200, type: typeof(SatelliteView), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetSatelliteView()
        {
            return new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer).GetSatelliteView();
        }

        /// <summary>
        /// Obtiene los estatus que puede tener un tractor
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/trucks/status")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTruckStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TruckStatus>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetTruckStatus()
        {
            return new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer).GetTruckStatus();
        }

        /// <summary>
        /// Obtiene los tipos de tractor
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/trucks/types")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTruckTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TruckType>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetTruckTypes()
        {
            return new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer).GetTruckTypes();
        }

        /// <summary>
        /// Obtiene los tractores en el sistema
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/trucks")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [AllowAnonymous]
        [SwaggerOperation("GetTrucks")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Truck>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetTrucks()
        {
            return new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer).GetTrucks();
        }

        /// <summary>
        /// Obtiene la información de seguimiento actual de todos los tractores
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/trucks/tracking-info")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTrucksTrackingInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TrackingInfo>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetTrucksTrackingInfo()
        {
            return new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer).GetTrucksTrackingInfo();
        }

        /// <summary>
        /// Actualiza el status de un tractor
        /// </summary>
        /// <param name="id">El id del tractor</param>
        /// <param name="status">El estatus del tractor</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPut]
        [Route("/trucks/{id}/status/{status}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateTruckStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult UpdateTruckStatus([FromRoute][Required]int? id, [FromRoute][Required]int? status)
        {
            return new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer).UpdateTruckStatus(id, status);
        }

        /// <summary>
        /// Obtiene la disponibilidad de los tractores
        /// </summary>
        /// <param name="id">El id del tractor</param>
        /// <param name="startDate">La primera fecha a consultar</param>
        /// <param name="endDate">La última fecha a consultar</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/trucks/{id}/availability")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTrucksAvailability")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Availability>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetTrucksAvailability([FromRoute][Required] int? id)
        {
            return new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer).GetTrucksAvailability(id);
        }

        /// <summary>
        /// Obtiene las razones de disponibilidad de los tractores en el sistema
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/trucks/availability-reasons")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTrucksAvailabilityReasons")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AvailabilityReason>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetTrucksAvailabilityReasons()
        {
            return new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer).GetTrucksAvailabilityReasons();
        }

        /// <summary>
        /// Actualiza la disponibilidad de un tractores
        /// </summary>
        /// <param name="body"></param>
        /// <param name="id">El id del tractor</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpPut]
        [Route("/trucks/{id}/availability")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PutTrucksAvailability")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Availability>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult PutTrucksAvailability([FromBody] Availability body, [FromRoute][Required] int? id)
        {
            return new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer).UpdateTrucksAvailability(body, id);
        }

        /// <summary>
        /// Obtiene el tractor asignado a un operador
        /// </summary>
        /// <param name="idOperator">El id del operador</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/trucks/Operator-profile/{idOperator}/")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTruckByIdOperator")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<OperatorProfile>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        public virtual IActionResult GetTruckByIdOperator([FromRoute][Required]int? idOperator)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<OperatorProfile>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            //TODO: Change the data returned
            TrucksBusiness trucksBusiness = new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer);
            //trucksBusiness.GetTruckByIdOperator(idOperator);
            return new ObjectResult(trucksBusiness.GetTruckByIdOperator(idOperator));
        }

        [HttpPatch]
        [AllowAnonymous]
        [Route("/trucks/sincronizar")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SincronizarTractores")]
        [SwaggerResponse(statusCode: 200, description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual void SincronizarTractores()
        {
            new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer).SincronizarTractores();
        }


        /// <summary>
        /// Sincronizar los tractores
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpPatch]
        [AllowAnonymous]
        [Route("/trucks/status-generate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SetTrucksStatusByDay")]
        [SwaggerResponse(statusCode: 200, description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual void SetTrucksStatusByDay()
        {
            new TrucksBusiness(Context, CrmContext, InnovaLinksContext, User, localizer).SetTrucksStatusByDay();
        }
    }
}
