/*
 * Core.Api
 *
 * Documentación de api del TMS de Transportes Cuauhtémoc
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using TmsTcAPI.DAL.Models;
using IO.Swagger.Models;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Business;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// Api encargada de las operaciones de tipos de mercado
    /// </summary>
    [ApiController]
    public class ZonesApiController : ControllerBase
    {
        private readonly TmsTcEntities context;

        public ZonesApiController(TmsTcEntities context)
        {
            this.context = context;
        }

        /// <summary>
        /// Obtiene las zonas
        /// </summary>
        /// <param name="active">Si se especifica filtra por estado habilitado o deshabilitado</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        [HttpGet]
        [Route("/zones")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [AllowAnonymous]
        [ValidateModelState]
        [SwaggerOperation("GetZones")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Zone>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        public virtual IActionResult GetZones([FromQuery]bool? active)
        {
            return new ZonesBusiness(context, User).GetZones(active);
        }

        /// <summary>
        /// Añade una Zona
        /// </summary>
        /// <param name="body">La zona a añadir</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/zones")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddZone")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult AddZone([FromBody][Required]Zone body)
        {
            return new ZonesBusiness(context, User).AddZone(body);
        }

        /// <summary>
        /// Actualiza una zona
        /// </summary>
        /// <param name="id">El id de la zona</param>
        /// <param name="body">El tipo de mercado modificado</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPut]
        [Route("/zones/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateZone")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        public virtual IActionResult UpdateZone([FromRoute][Required]int id, [FromBody][Required]Zone body)
        {
            return new ZonesBusiness(context, User).UpdateZone(id, body);
        }

        /// <summary>
        /// Elimina una Zona
        /// </summary>
        /// <param name="id">El id del tipo de la zona</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpDelete]
        [Route("/zones/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteZone")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        public virtual IActionResult DeleteZone([FromRoute][Required]int id)
        {
            return new ZonesBusiness(context, User).DeleteZone(id);
        }
    }
}
