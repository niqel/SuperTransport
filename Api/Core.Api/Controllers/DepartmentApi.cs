/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using TmsTcAPI.DAL.Models;
using Core.Api.Business;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DepartmentApiController : ControllerBase
    {

        private readonly TmsTcEntities context;
        private DepartmentBusiness departmentBusiness;


        public DepartmentApiController(TmsTcEntities tmsTcEntities)
        {
            this.context = tmsTcEntities;
            this.departmentBusiness = new DepartmentBusiness(context, User);
        }

        /// <summary>
        /// Crea un nuevo departamento
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/Department")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DepartmentPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Department), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult DepartmentPost([FromBody] Department body)
        {
            this.departmentBusiness.CreateDepartment(body);
            return new ObjectResult(body);
        }

       
        /// <summary>
        /// Elimina un Departamento
        /// </summary>
        /// <param name="id">El id del departamento</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("/Department/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DepartmentIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Department), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        public virtual IActionResult DepartmentIdDelete([FromRoute][Required] int? id)
        {
            var idDeleted = this.departmentBusiness.DeleteDepartmentBy((int)id);
            return new ObjectResult(idDeleted);
        }


        /// <summary>
        /// Listado de los departamentos
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/Department")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DepartmentGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Department>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult DepartmentGet()
        {
            return new ObjectResult(this.departmentBusiness.GetAllDepartments());
        }


        /// <summary>
        /// Obtiene un departamento por id
        /// </summary>
        /// <param name="id">El id del departamento</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/Department/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DepartmentIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Department), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        public virtual IActionResult DepartmentIdGet([FromRoute][Required] int? id)
        {
            var department = this.departmentBusiness.GetDepartmentByid((int)id);
            return new ObjectResult(department);
        }


        /// <summary>
        /// Actualiza el departamento
        /// </summary>
        /// <param name="id">El id del del departamento</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPut]
        [Route("/Department/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DepartmentIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Department), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult DepartmentIdPut([FromRoute][Required] int? id, [FromBody] Department body)
        {
            this.departmentBusiness.UpdateDepartment((int)id, body);
            return new ObjectResult(this.departmentBusiness.UpdateDepartment((int)id, body));
        }


    }
}
