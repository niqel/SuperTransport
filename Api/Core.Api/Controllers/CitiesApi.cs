/*
 * Core.Api
 *
 * Documentación de api del TMS de Transportes Cuauhtémoc
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using TmsTcAPI.DAL.Models;
using IO.Swagger.Models;
using IO.Swagger.Business;
using System.ComponentModel.DataAnnotations;


namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// Api encargada de las operaciones de ciudades
    /// </summary>
    [ApiController]
    public class CitiesApiController : ControllerBase
    {
        private readonly TmsTcEntities context;

        public CitiesApiController(TmsTcEntities context)
        {
            this.context = context;
        }

        /// <summary>
        /// Obtiene las ciudades
        /// </summary>
        /// <param name="active">Si se especifica filtra por estado habilitado o deshabilitado</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        [HttpGet]
        [Route("/cities")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [AllowAnonymous]
        [ValidateModelState]
        [SwaggerOperation("GetCities")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<City>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        public virtual IActionResult GetCities([FromQuery]bool? active)
        {
            return new CitiesBusiness(context, User).GetCities(active);
        }

        /// <summary>
        /// Asigna una zona a una ciudad
        /// </summary>
        /// <param name="id">El id de la ciudad</param>
        /// <param name="zone">La zona a asignar</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPut]
        [Route("/cities/{id}/zone")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateCityZone")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        public virtual IActionResult UpdateCityZone([FromRoute][Required]int id, [FromQuery]int? zone)
        {
            return new CitiesBusiness(context, User).UpdateCityZone(id, zone);
        }
    }
}
