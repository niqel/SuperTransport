/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Business;
using AuthenticationHandler.Controllers;
using ListdbTc.DAL.Models;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LoadPlansApiController : TmsControllerBase
    {
        protected ListdbTcEntities ListdbTcContext { get; private set; }
        public LoadPlansApiController(TmsTcAPI.DAL.Models.TmsTcEntities context, ListdbTcEntities listdbTcContext) : base(context)
        {
            ListdbTcContext = listdbTcContext;
        }

        /// <summary>
        /// Obtiene las métricas de los operadores
        /// </summary>
        /// <param name="year">El año del plan de carga</param>
        /// <param name="month">El mes del plan de carga</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/operators/{year}/{month}/metrics")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [AllowAnonymous]
        [SwaggerOperation("GetOperatorsMetrics")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LoadPlansMetrics>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetOnlyTruckOperatorsMetrics([FromRoute][Required] int? year, [FromRoute][Required] int? month)
        {
            return new LoadPlansBusiness(Context, ListdbTcContext, User).GetOnlyTruckOperatorsMetrics(year, month);
        }

        /// <summary>
        /// Obtiene las métricas del plan de carga
        /// </summary>
        /// <param name="year">El año del plan de carga</param>
        /// <param name="month">El mes del plan de carga</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/load-plans/{year}/{month}/metrics")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [AllowAnonymous]
        [SwaggerOperation("GetLoadPlansMetrics")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LoadPlansMetrics>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetLoadPlansMetrics([FromRoute][Required]int? year, [FromRoute][Required]int? month)
        {
            return new LoadPlansBusiness(Context, ListdbTcContext, User).GetOnlyLoadPlansMetrics(year, month);
        }

        /// <summary>
        /// Obtiene las métricas de los tractores
        /// </summary>
        /// <param name="year">El año del plan de carga</param>
        /// <param name="month">El mes del plan de carga</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/fleet/{year}/{month}/metrics")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [AllowAnonymous]
        [SwaggerOperation("GetFleetMetrics")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LoadPlansMetrics>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetOnlyFleetMetrics([FromRoute][Required] int? year, [FromRoute][Required] int? month)
        {
            return new LoadPlansBusiness(Context, ListdbTcContext, User).GetOnlyFleetMetrics(year, month);
        }

        /// <summary>
        /// Obtiene las métricas de los tractores
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/load-plans/ultimaActualizacion")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [AllowAnonymous]
        [SwaggerOperation("GetUltimaActualizacion")]
        [SwaggerResponse(statusCode: 200, type: typeof(UltimaActualizacion), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetFechaUltimaActualizacion()
        {
            return new LoadPlansBusiness(Context, ListdbTcContext, User).GetFechaUltimaActualizacion();
        }
    }
}
