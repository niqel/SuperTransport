/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FleetMetrics : IEquatable<FleetMetrics>
    { 
        /// <summary>
        /// Total
        /// </summary>
        /// <value>Total</value>

        [DataMember(Name="total")]
        public int? Total { get; set; }

        /// <summary>
        /// En tránsito
        /// </summary>
        /// <value>En tránsito</value>

        [DataMember(Name="transit")]
        public int? Transit { get; set; }

        /// <summary>
        /// Cargando
        /// </summary>
        /// <value>Cargando</value>

        [DataMember(Name="loading")]
        public int? Loading { get; set; }

        /// <summary>
        /// Disponible en base sin asignacion
        /// </summary>
        /// <value>Disponible en base sin asignacion</value>

        [DataMember(Name="available")]
        public int? Available { get; set; }

        /// <summary>
        /// No disponbiles por taller
        /// </summary>
        /// <value>No disponbiles por taller</value>

        [DataMember(Name="not_available")]
        public int? NotAvailable { get; set; }

        /// <summary>
        /// En mantenimiento
        /// </summary>
        /// <value>En mantenimiento</value>

        [DataMember(Name="maintenance")]
        public int? Maintenance { get; set; }

        /// <summary>
        /// Accidentado
        /// </summary>
        /// <value>Accidentado</value>

        [DataMember(Name="accident")]
        public int? Accident { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FleetMetrics {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Transit: ").Append(Transit).Append("\n");
            sb.Append("  Loading: ").Append(Loading).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  NotAvailable: ").Append(NotAvailable).Append("\n");
            sb.Append("  Maintenance: ").Append(Maintenance).Append("\n");
            sb.Append("  Accident: ").Append(Accident).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FleetMetrics)obj);
        }

        /// <summary>
        /// Returns true if FleetMetrics instances are equal
        /// </summary>
        /// <param name="other">Instance of FleetMetrics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FleetMetrics other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                ) && 
                (
                    Transit == other.Transit ||
                    Transit != null &&
                    Transit.Equals(other.Transit)
                ) && 
                (
                    Loading == other.Loading ||
                    Loading != null &&
                    Loading.Equals(other.Loading)
                ) && 
                (
                    Available == other.Available ||
                    Available != null &&
                    Available.Equals(other.Available)
                ) && 
                (
                    NotAvailable == other.NotAvailable ||
                    NotAvailable != null &&
                    NotAvailable.Equals(other.NotAvailable)
                ) && 
                (
                    Maintenance == other.Maintenance ||
                    Maintenance != null &&
                    Maintenance.Equals(other.Maintenance)
                ) && 
                (
                    Accident == other.Accident ||
                    Accident != null &&
                    Accident.Equals(other.Accident)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    if (Transit != null)
                    hashCode = hashCode * 59 + Transit.GetHashCode();
                    if (Loading != null)
                    hashCode = hashCode * 59 + Loading.GetHashCode();
                    if (Available != null)
                    hashCode = hashCode * 59 + Available.GetHashCode();
                    if (NotAvailable != null)
                    hashCode = hashCode * 59 + NotAvailable.GetHashCode();
                    if (Maintenance != null)
                    hashCode = hashCode * 59 + Maintenance.GetHashCode();
                    if (Accident != null)
                    hashCode = hashCode * 59 + Accident.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FleetMetrics left, FleetMetrics right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FleetMetrics left, FleetMetrics right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
