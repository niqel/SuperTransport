/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@tc.com.mx
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PersonalInformation : IEquatable<PersonalInformation>
    { 
        /// <summary>
        /// Nombre completo operador
        /// </summary>
        /// <value>Nombre completo operador</value>

        [DataMember(Name="givenName")]
        public string GivenName { get; set; }

        /// <summary>
        /// El email del operador
        /// </summary>
        /// <value>El email del operador</value>

        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// Fecha nacimiento del operador
        /// </summary>
        /// <value>Fecha nacimiento del operador</value>

        [DataMember(Name="birthday")]
        public DateTime? Birthday { get; set; }

        /// <summary>
        /// Fecha ingreso del operador
        /// </summary>
        /// <value>Fecha ingreso del operador</value>

        [DataMember(Name="entry_date")]
        public DateTime? EntryDate { get; set; }

        /// <summary>
        /// Url fotografia
        /// </summary>
        /// <value>Url fotografia</value>

        [DataMember(Name="picturePath")]
        public string PicturePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonalInformation {\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Birthday: ").Append(Birthday).Append("\n");
            sb.Append("  EntryDate: ").Append(EntryDate).Append("\n");
            sb.Append("  PicturePath: ").Append(PicturePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PersonalInformation)obj);
        }

        /// <summary>
        /// Returns true if PersonalInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of PersonalInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalInformation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GivenName == other.GivenName ||
                    GivenName != null &&
                    GivenName.Equals(other.GivenName)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Birthday == other.Birthday ||
                    Birthday != null &&
                    Birthday.Equals(other.Birthday)
                ) && 
                (
                    EntryDate == other.EntryDate ||
                    EntryDate != null &&
                    EntryDate.Equals(other.EntryDate)
                ) && 
                (
                    PicturePath == other.PicturePath ||
                    PicturePath != null &&
                    PicturePath.Equals(other.PicturePath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GivenName != null)
                    hashCode = hashCode * 59 + GivenName.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Birthday != null)
                    hashCode = hashCode * 59 + Birthday.GetHashCode();
                    if (EntryDate != null)
                    hashCode = hashCode * 59 + EntryDate.GetHashCode();
                    if (PicturePath != null)
                    hashCode = hashCode * 59 + PicturePath.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PersonalInformation left, PersonalInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PersonalInformation left, PersonalInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
