/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Address : IEquatable<Address>
    { 
        /// <summary>
        /// La primera línea de esta dirección
        /// </summary>
        /// <value>La primera línea de esta dirección</value>
        [Required]
        [DataMember(Name="line1")]
        public string Line1 { get; set; }

        /// <summary>
        /// La segunda línea de esta dirección
        /// </summary>
        /// <value>La segunda línea de esta dirección</value>
        [DataMember(Name="line2")]
        public string Line2 { get; set; }

        /// <summary>
        /// La tercera línea de esta dirección
        /// </summary>
        /// <value>La tercera línea de esta dirección</value>
        [DataMember(Name="line3")]
        public string Line3 { get; set; }

        /// <summary>
        /// La ciudad de esta dirección
        /// </summary>
        /// <value>La ciudad de esta dirección</value>
        [Required]
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// El estado de esta dirección
        /// </summary>
        /// <value>El estado de esta dirección</value>
        [Required]
        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// El código postal de esta dirección
        /// </summary>
        /// <value>El código postal de esta dirección</value>
        [Required]
        [DataMember(Name="postal_code")]
        public int? PostalCode { get; set; }

        /// <summary>
        /// El país de esta dirección
        /// </summary>
        /// <value>El país de esta dirección</value>
        [Required]
        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  Line3: ").Append(Line3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Address)obj);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="other">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Line1 == other.Line1 ||
                    Line1 != null &&
                    Line1.Equals(other.Line1)
                ) && 
                (
                    Line2 == other.Line2 ||
                    Line2 != null &&
                    Line2.Equals(other.Line2)
                ) && 
                (
                    Line3 == other.Line3 ||
                    Line3 != null &&
                    Line3.Equals(other.Line3)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    PostalCode == other.PostalCode ||
                    PostalCode != null &&
                    PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Line1 != null)
                    hashCode = hashCode * 59 + Line1.GetHashCode();
                    if (Line2 != null)
                    hashCode = hashCode * 59 + Line2.GetHashCode();
                    if (Line3 != null)
                    hashCode = hashCode * 59 + Line3.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (PostalCode != null)
                    hashCode = hashCode * 59 + PostalCode.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Address left, Address right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Address left, Address right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
