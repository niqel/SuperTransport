/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.Business;
using AuthenticationHandler.Controllers;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EmployeesApiController : TmsControllerBase
    {
        public EmployeesApiController(TmsTcAPI.DAL.Models.TmsTcEntities context) : base(context)
        {
        }

        /// <summary>
        /// Sincroniza los empleados
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPatch]
        [Route("/employees/operators")]
        [AllowAnonymous]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SetOperatorsStatusByDay")]
        [SwaggerResponse(statusCode: 200, description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual void SetOperatorsStatusByDay()
        {
            new EmployeesBusiness(Context, User).SetOperatorsStatusByDay();
        }

        /// <summary>
        /// Obtiene las razones de disponibilidad del sistema
        /// </summary>
        /// <param name="id">El id del tipo de empleado</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/employees/types/{id}/availability-reasons")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetEmployeeAvailabilityReasons")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AvailabilityReason>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetEmployeeAvailabilityReasons([FromRoute][Required]int? id)
        {
            return new EmployeesBusiness(Context, User).GetEmployeeAvailabilityReasons(id);
        }

        /// <summary>
        /// Obtiene los tipos de empleado en el sistema
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/employees/types")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetEmployeeTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EmployeeType>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetEmployeeTypes()
        {
            return new EmployeesBusiness(Context, User).GetEmployeeTypes();
        }

        /// <summary>
        /// Sincroniza los empleados
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPatch]
        [Route("/employees/sincronizar")]
        [AllowAnonymous]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SincronizarEmpleados")]
        [SwaggerResponse(statusCode: 200, description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual void SincronizarTractores()
        {
            new EmployeesBusiness(Context, User).SincronizarEmpleados();
        }

    }
}
