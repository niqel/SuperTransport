/*
 * Transportes Cuauhtémoc
 *
 * Transportes Cuauhtémoc (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using AuthenticationHandler.Controllers;
using IO.Swagger.Business;
using System.ComponentModel.DataAnnotations;
using System;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TruckOperatorsApiController : TmsControllerBase
    {
        public TruckOperatorsApiController(TmsTcAPI.DAL.Models.TmsTcEntities context) : base(context)
        {
        }
        
        /// <summary>
        /// Obtiene la disponibilidad de un operador
        /// </summary>
        /// <param name="id">El id del operador</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/truck-operators/{id}/availability")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTruckOperatorAvailability")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Availability>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetTruckOperatorAvailability([FromRoute][Required]int? id)
        {
            return new TruckOperatorsBusiness(Context, User).GetTruckOperatorAvailability(id);
        }

        /// <summary>
        /// Obtiene los operadores en el sistema
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/truck-operators")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTruckOperators")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TruckOperator>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult GetTruckOperators()
        {
            return new TruckOperatorsBusiness(Context, User).GetTruckOperators();
        }

        /// <summary>
        /// Actualiza un operador
        /// </summary>
        /// <param name="body"></param>
        /// <param name="id">El id del operador</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPut]
        [Route("/truck-operators/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateTruckOperator")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult UpdateTruckOperator([FromBody]TruckOperator body, [FromRoute][Required]int? id)
        {
            return new TruckOperatorsBusiness(Context, User).UpdateTruckOperator(body, id);
        }

        /// <summary>
        /// Actualiza la disponibilidad de un operador
        /// </summary>
        /// <param name="body"></param>
        /// <param name="id">El id del operador</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPut]
        [Route("/truck-operators/{id}/availability")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateTruckOperatorAvailability")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProblemDetails), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        public virtual IActionResult UpdateTruckOperatorAvailability([FromBody]Availability body, [FromRoute][Required]int? id)
        {
            return new TruckOperatorsBusiness(Context, User).UpdateTruckOperatorAvailability(body, id);
        }
    }
}
